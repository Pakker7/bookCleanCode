시스템

객체지향 5대 원칙
SRP(단일 책임 원칙) : 소프트웨어의 설계 부품(클래스, 함수 등)은 단 하나의 책임만을 가져야 한다.
OCP(개방-폐쇄 원칙) : 기존의 코드를 변경하지 않고(Closed) 기능을 수정하거나 추가할 수 있도록(Open) 설계해야 한다.
LSP(리스코프 치환 원칙) : 자식 클래스는 부모클래스에서 가능한 행위를 수행할 수 있어야 한다.
DIP(의존 역전 원칙) : 의존 관계를 맺을 때, 변화하기 쉬운 것 보단 변화하기 어려운 것에 의존해야 한다는 원칙이다. 
ISP(인터페이스 분리 원칙): 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다. 하나의 일반적인 인터페이스보다는, 여러 개의 구체적인 인터페이스가 낫다
을 말하며, 앞자를 따서 SOILD 원칙


설계 : 관심사 분리
초기화 지연 기법은 쓰면 안된다…

1.	main 분리 : 생성은 모두 main으로, 어플리케이션은 객체를 사용만함
2.	팩토리: 어플리ㅔ케이션이 객체 생성 서점 정함

의존성 주입
사용과 제작을 분리하는 강력한 메커니즘
제어 역전 기법(토비의 스프링 p.740) 한 객체가 맡은 보조 책임을 새로운 객체에게 전적으로 떠넘긴다.(새로운 객체는 넘겨받은 책임만 맡으므로 단일책임원칙을 지키게 된다.) ?????????

DI와 strategy pattern의 차이
http://asuraiv.blogspot.com/2014/07/strategy-pattern.html
